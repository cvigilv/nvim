import time  # used for examples, remove

import pytest

# NOTE: This is a test file with some common examples of how to use `pytest`. This is the bare
#       minimum functionality one should know in order to properly test the module. In case
#       this examples aren't enough to provide the testing one desires, please refer to the
#       docs at https://docs.pytest.org/en/7.4.x/contents.html.


def test_with_assert():
    """Test using `assert` statement"""

    i = 1
    j = 1
    assert i == j


def test_with_helper():
    """Test using `pytest.raise` helper"""

    i = 1
    k = 2
    with pytest.raises(AssertionError):
        assert i == k

    with pytest.raises(ZeroDivisionError):
        i / 0

    with pytest.raises(TypeError):
        str(i) - k


def test_with_tmppath(tmp_path):
    """Test using temporal path provided by `pytest`. Useful for I/O testing."""

    print(tmp_path)
    assert True


@pytest.mark.parametrize(
    "input,output",
    [
        ("4+2", 6),
        ("4-2", 2),
        ("4*2", 8),
        ("4/2", 2),
    ],
)
def test_with_parametrize_decorator(input, output):
    """Test using parametrizer decorator.

    This decorator provides an interface to generate a set of tests using the same function,
    but with different inputs and outputs. The decorator has the following signature:
    ```python
    @pytest.mark.parametrize(argnames, argvalues)
    ```
    where `argnames` is a comma-separated string denoting 1 or more arguments and `argvalues`
    is a list with the different argument values.

    In the example provided, we set `argnames` to "input,output" which are used as arguments
    to the test function and we set the `argvalues` to a list of tuples containing a string
    that is evaluated and the expected result of the evaluation.
    """

    assert eval(input) == output


@pytest.mark.slow
def test_with_marker_decorator():
    """Test containing marker expression decorator, can be run with `pytest -m MARKER`

    In this example, since its marked with `slow`, we can run exclusively this tests with
    `pytest -m slow`. Markers must be registered in the `pyproject.toml` file in order to be
    recognized by `pytest`. Implemented in this repository are: 'slow'

    `pytest` also has ways for running test by (i) keywords and (ii) by nodes. For more
    information, refer to https://docs.pytest.org/en/7.4.x/how-to/usage.html#how-to-invoke-pytest
    """

    for _ in range(10):
        time.sleep(1)
        assert True


class TestGroup:
    """Class for grouping test cases

    It provides a way to group test functions that (may) use common variables in tests.
    """

    # Common variables for tests set
    i = 1
    j = 1
    k = 2

    def test_with_assert(self):
        assert self.i == self.j

    def test_with_helper(self):
        with pytest.raises(AssertionError):
            assert self.i == self.k
